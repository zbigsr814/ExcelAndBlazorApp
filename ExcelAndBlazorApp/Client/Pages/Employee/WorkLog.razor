@page "/employees/{id:int}"
@using ExcelAndBlazorApp.Client.Components
@using ExcelAndBlazorApp.Shared.Dtos
@inject HttpClient Http


@if (employee is null)
{
    <p>Ładowanie danych...</p>
}
else
{
    <h1>Czas pracy dla @employee.Name</h1>
    <h1>Pesel: @employee.PESEL</h1>

    <table class="table table-striped">
        <thead>
            <tr>

                <th>Data rejestracji</th>
                <th>Czas pracy</th>
                <th>Zarobek brutto pracownika</th>
                <th>Zarobek netto pracownika</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var workLog in employee.WorkLogs)
            {
                <tr>
                    <td>@workLog.DateFormatted</td>
                    <td>@workLog.HoursWorked</td>
                    <td>@workLog.CostNet.ToString("F2")</td>
                    <td>@workLog.CostGross.ToString("F2")</td>
                    <td><button type="button" class="btn btn-danger btn-sm" @onclick="() => OpenDeleteDialog(workLog)">Usuń</button></td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    <div class="col-lg-4">
        <WorkItemForm EmployeeId="@employee.Id" OnSubmitCallback="@Refresh"></WorkItemForm>
    </div>

    @if (DeleteDialogOpen)
	{
		<ModalDialog Title="Usunąć rekord." Text="Czy napewno?" OnClose=@OnDeleteDialogClose DialogType="ModalDialog.ModalDialogType.DeleteCancel"></ModalDialog>
	}
	<br />
	<br />
	<br />
}

@code {
    [Parameter]
    public int Id { get; set; }
    private EmployeeDto employee;
    private WorkLogDto _workLogToDelete;
    public bool DeleteDialogOpen { get; set; }

    public void OpenDeleteDialog(WorkLogDto workLog)
    {
        DeleteDialogOpen = true;
        _workLogToDelete = workLog;
        StateHasChanged();
    }

    public async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            await Http.DeleteAsync($"api/employees/{Id}/{_workLogToDelete.Id}");
            await LoadData();
            _workLogToDelete = null;
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        employee = await Http.GetFromJsonAsync<EmployeeDto>($"api/employees/{Id}");
        StateHasChanged();
    }

    public async Task Refresh()
    {
        await LoadData();
    }
}